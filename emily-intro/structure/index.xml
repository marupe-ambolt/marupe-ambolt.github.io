<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Structure on My New Hugo Site</title>
    <link>http://example.org/emily-intro/structure/</link>
    <description>Recent content in Structure on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Sep 2021 09:50:28 +0200</lastBuildDate>
    
	<atom:link href="http://example.org/emily-intro/structure/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>API</title>
      <link>http://example.org/emily-intro/structure/api/</link>
      <pubDate>Mon, 27 Sep 2021 09:50:28 +0200</pubDate>
      
      <guid>http://example.org/emily-intro/structure/api/</guid>
      <description>The API contains endpoints that can be called by a user or another service to interact with the machine learning service implemented by the Emily project. As an example, let us have a look at the predict endpoint:
class PredictItem(BaseModel): sample: str model_path: str @app.post(&amp;#39;/api/predict&amp;#39;) def predict(item: PredictItem): return {&amp;#39;result&amp;#39;: emily.predict(item)} Here we can see that the predict endpoint is a POST request and is accessed through /api/predict. Furthermore, we see that it requires two parameters in the request body: a sample and a model path.</description>
    </item>
    
    <item>
      <title>Emily</title>
      <link>http://example.org/emily-intro/structure/emily/</link>
      <pubDate>Mon, 27 Sep 2021 09:50:28 +0200</pubDate>
      
      <guid>http://example.org/emily-intro/structure/emily/</guid>
      <description>The Emily class is simply a wrapper class that instantiates a trainer, an evaluator, and a predictor, and makes these available for calling through the API.
def __init__(self): self.predictor = Predictor() # Creates instance of the Predictor class self.trainer = Trainer() # Creates instance of the Trainer class self.evaluator = Evaluator() # Creates instance of the Evaluator class def predict(self, request): &amp;#34;&amp;#34;&amp;#34; This function calls the __call__ function from the Predictor class in ml.</description>
    </item>
    
    <item>
      <title>Trainer</title>
      <link>http://example.org/emily-intro/structure/trainer/</link>
      <pubDate>Mon, 27 Sep 2021 09:50:28 +0200</pubDate>
      
      <guid>http://example.org/emily-intro/structure/trainer/</guid>
      <description>The trainer implements the behaviour for training a model. The steps for doing so are the following:
 Load training data Preprocess training data Train using the training data Save the trained model  1. Load training data In order to load the training data, the _load_train_data method must be implemented. For example, the training data can be loaded by reading a csv file using pandas:
def _load_train_data(self, dataset_path): train_dataset = pandas.</description>
    </item>
    
    <item>
      <title>Evaluator</title>
      <link>http://example.org/emily-intro/structure/evaluator/</link>
      <pubDate>Mon, 27 Sep 2021 09:50:28 +0200</pubDate>
      
      <guid>http://example.org/emily-intro/structure/evaluator/</guid>
      <description>The evaluator implements the behaviour for evaluating a model. The steps for doing so are the following:
 Load the model Load the test data Preprocess the test data Evaluate the model on the test data  1. Load the model In order to load the model, use the load_model method on the model class. Here is how this is done by default in the template:
if model_path != self.model_path: self.</description>
    </item>
    
    <item>
      <title>Predictor</title>
      <link>http://example.org/emily-intro/structure/predictor/</link>
      <pubDate>Mon, 27 Sep 2021 09:50:28 +0200</pubDate>
      
      <guid>http://example.org/emily-intro/structure/predictor/</guid>
      <description>The predictor implements the behaviour for using a model to make a prediction based on a sample. The steps for doing so are the following:
 Load the model Preprocess the sample Make the prediction Postprocess the prediction  1. Load the model In order to load the model, use the load_model method on the model class. Here is how this is done by default in the template:
if model_path !</description>
    </item>
    
    <item>
      <title>Model</title>
      <link>http://example.org/emily-intro/structure/model/</link>
      <pubDate>Mon, 27 Sep 2021 09:50:28 +0200</pubDate>
      
      <guid>http://example.org/emily-intro/structure/model/</guid>
      <description>The model is where the type of machine learning model to be used in the Emily project is specified. This should be done by letting the model class inherit from whichever machine learning model you wish to use in the project. For example, if you want to use a linear regression model, you can use the LinearRegression class from scikit-learn:
class Model(sklearn.linear_model.LinearRegression): When we forward a sample to the model, it should make a prediction.</description>
    </item>
    
  </channel>
</rss>